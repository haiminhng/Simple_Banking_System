type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Bank.java
  visible: true
  text: |-
    package banking;
    import java.util.Scanner;
    import java.util.Random;

    public class Bank {
        Random ccidGenerator = new Random();
        static Scanner input = new Scanner(System.in);
        public static void init() {
            CreditCard ccNr1 = new CreditCard();
            int userchoice = 0;
            String checkCCNr;
            int checkCCpin = 0;
            do{
                System.out.println("1. Create an account\n" +
                        "2. Log into account\n" +
                        "0. Exit");
                userchoice = input.nextInt();
                switch(userchoice){
                    case 0:
                        System.out.println("Bye!");
                        break;
                    case 1:
                        System.out.println("Your card has been created\n" +
                                "Your card number:");
                        System.out.println(ccNr1.generateCardNr());
                        System.out.println("Your card PIN:");
                        System.out.println(ccNr1.generatePinNr());
                        break;
                    case 2:
                        System.out.println("Enter your card number:");
                        checkCCNr = input.next();
                        System.out.println("Enter your PIN:");
                        checkCCpin = input.nextInt();
                        if(checkCCNr.equals(ccNr1.getCardNr()) && checkCCpin == ccNr1.getPinNr()){
                            System.out.println("You have successfully logged in!\n");
                            do {
                                System.out.println("1. Balance\n" +
                                        "2. Log out\n" +
                                        "0. Exit");
                                userchoice = input.nextInt();
                                switch (userchoice) {
                                    case 0:
                                        userchoice = 3;
                                        break;
                                    case 1:
                                        System.out.println("Balance: "+ccNr1.getCardBalance());
                                        break;
                                    case 2:
                                        userchoice = 3;
                                        System.out.println("You have successfully logged out!");
                                        break;
                                    default:
                                        break;
                                }
                            }while (userchoice != 3);
                        }
                        else{
                            System.out.println("Wrong card number or PIN!");
                        }
                        break;
                    default:
                        break;
                }
            }while(userchoice != 0);
        }
    }
  learner_created: true
- name: src/banking/CreditCard.java
  visible: true
  text: |
    package banking;
    import java.util.Random;

    public class CreditCard {
        private String cardNumber; // cardNumber = IIN + cAccountNr + checkSumNr
        private int PinNr = 0000;// pinNr
        private double cardBalance = 0;
        private final int IINR = 400000; // final
        private int checkSumNr; //last digit of cardNumber
        private int[] cAccountNrFrom = new int[9];// an Array Form for 9 digits Nr
        private int[] pinNrForm = new int[4]; // to generate 4 random digits Pin
        private Random nrGenerator = new Random(); // Generate random number

        protected String generateCardNr() {
            StringBuilder builder = new StringBuilder();
            builder.append(IINR);
            builder.append(cAccountNrGenerator());
            builder.append(checkSumNrGenerator());
            while(builder.length()==16){
                cardNumber = builder.toString();
                return cardNumber;
            }
            return cardNumber;
        }

        protected String getCardNr(){
            return cardNumber;
        }

        protected int getPinNr(){
            return PinNr;
        }

        protected int generatePinNr() {
            StringBuilder builder = new StringBuilder();
            builder.append(pinNrGenerator());
            while(builder.length()==4){
                PinNr = Integer.parseInt(builder.toString());
                return PinNr;
            }
            return PinNr;

        }

        protected double getCardBalance() {
            return cardBalance;
        }

        private void setCardBalance(double cardBalance) {
            this.cardBalance = cardBalance;
        }

        private int cAccountNrGenerator() {
        StringBuilder builder = new StringBuilder();
        for(int raNr : cAccountNrFrom){
            raNr = nrGenerator.nextInt(9);
            builder.append(raNr);
        }
         int raNr = Integer.parseInt(builder.toString());
         return raNr;
        }

        private int pinNrGenerator() {
            StringBuilder builder = new StringBuilder();
            for(int raNr : pinNrForm){
                raNr = nrGenerator.nextInt(9);
                builder.append(raNr);
            }
            int raNr = Integer.parseInt(builder.toString());
            return raNr;
        }

        private int checkSumNrGenerator() {
            checkSumNr = nrGenerator.nextInt(9);
            return checkSumNr;
        }

    }
  learner_created: true
- name: src/banking/Database.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 18 Feb 2021 10:57:05 UTC
record: 2
